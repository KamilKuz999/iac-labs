# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./example-app
        
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          
      - name: Install Poetry Action
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

  lint:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    concurrency:
      group: static
      cancel-in-progress: false
    steps:
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv
      - name: Install Flake8
        run: |
          python -m pip install flake8
    
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

  formatter:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    concurrency:
      group: static
      cancel-in-progress: false
    steps:
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv
      - name: Install Black
        run: |
          python -m pip install black
      - name: Format code with black
        run: |
          black .

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

  
          
  security:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    concurrency:
      group: static
      cancel-in-progress: false
      
    steps:
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv
      - name: Install Bandit
        run:
          pip install bandit
      - name: Run bandit
        run: |
          bandit -r .  

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}


  unit-tests:
    needs: [security, lint, formatter]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv
      - name: Install additional dependencies for unit tests
        run: |
          cd example-app
          pip install coverage  pytest
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
      - name: Run unit tests with coverage
        run: |
          cd example-app
          coverage run -m pytest
      - name: Show test coverage report
        run: |
          cd example-app
          coverage report -m

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-venv-${{ hashFiles('**/*.toml') }}

